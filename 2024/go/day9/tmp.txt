package main

import (
	"fmt"
	"os"
)

type memPoint struct {
	index int
	len   int
}

var freeMem []memPoint
var mem []memPoint

func main() {
	

	memorymap := convertStringtomap(string(dat))
	arrange(memorymap)
	arrangept2(memorymap)
	checksum := calculateChecksum(memorymap)

	fmt.Println(checksum)

}

func convertStringtomap(s string) []int {

	var mapMemory []int
	var id int
	var freelen int

	for i := 0; i < len(s); i++ {

		for j := 0; j < int(s[i]-'0'); j++ {
			if i%2 == 0 {
				mapMemory = append(mapMemory, id)
				mem = append(mem, memPoint{id, int(s[i] - '0')})
			} else {
				mapMemory = append(mapMemory, -1)
				freelen++
			}
		}
		if i%2 == 0 {

			freeMem = append(freeMem, memPoint{i - freelen, freelen})
			freelen = 0
			id++
		}
	}

	return mapMemory
}

func calculateChecksum(arr []int) int {
	var sum int
	for i := 0; i < len(arr); i++ {

		if arr[i] < 0 {
			continue

		}

		sum += arr[i] * i

	}

	return sum
}

func arrange(arr []int) {
	l := 0
	r := len(arr) - 1

	for {

		for arr[l] >= 0 {
			l++
		}

		for arr[r] < 0 {
			r--
		}

		if l >= r {
			break
		}

		arr[l] = arr[r]
		arr[r] = -1

	}
}

func arrangept2(arr []int) {
	r := len(mem) - 1

	for _, lenfree := range freeMem {
		for r > 0 {
			if mem[r].len == lenfree.len {
				for i := 0; i < lenfree.len; i++ {
					arr[lenfree.len+i] = r
				}
			}
			r--
		}

	}
	fmt.Println(arr)
}